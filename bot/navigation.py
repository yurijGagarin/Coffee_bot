import random
from copy import deepcopy
from datetime import date, timedelta

from models import User as UserModel

ROLL_BUTTON = "üé≤"
HOME_BUTTON = "üè†"
HOME_REPLY_WITH_RANDOM = "–°–ø–æ–¥—ñ–≤–∞—é—Å—å —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è ‚ò∫Ô∏è"
HOME_REPLY = [
    HOME_REPLY_WITH_RANDOM,
    "–î–∞–≤–∞–π —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–æ–≤—É üòÅ",
    "–ê —Ç–∏ –≤–∂–µ –¥–∏–≤–∏–≤—Å—è –Ω–∞—à–µ —Å–µ–∑–æ–Ω–µ –º–µ–Ω—é?ü§î",
    "–ú–æ–∂–µ –ø–æ –µ–∫–ª–µ—Ä—á–∏–∫—É? ü§§",
]
HELP_BUTTON = "–î–æ–ø–æ–º–æ–≥–∞"
BACK_TEXT = "–ù–∞–∑–∞–¥"
CHOOSE_BUTTONS = ["–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", "‚¨áÔ∏è", "‚§µÔ∏è", "‚û°Ô∏è", "üîΩ"]
WELCOME_TEXT = ["üëã –í—ñ—Ç–∞—î–º–æ –≤ –¥—ñ–¥–∂–∏—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–º—É –ú—É—Å–∫–∞—Ç—ñ üôÇ",
                "üëã –†–∞–¥—ñ —Ç–µ–±–µ –±–∞—á–∏—Ç–∏!",
                "üëã –î–∞–≤–∞–π –ø—ñ–¥–±–µ—Ä–µ–º–æ —Ç–æ–±—ñ —â–æ—Å—å —Å–º–∞—á–Ω–µ–Ω—å–∫–µ ü§ó"]
MISUNDERSTOOD_TEXT = "–í–∏–±–∞—á—Ç–µ, –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—Å"
DEFAULT_TEXTS = ["üôÇ", "üòä", "üôÉ"]
HELP_TEXT = """–í—ñ—Ç–∞—î–º–æ, —Ü–µ —Å–ª–æ–≤–Ω–∏—á–æ–∫ —Å–∫–æ—Ä–æ—á–µ–Ω—å –ú—É—Å–∫–∞—Ç –ë–æ—Ç–∞.
<b>[–ë/–õ]</b> --> –ó–∞–º—ñ—Å—Ç—å –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –º–æ–ª–æ–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–µ–∑–ª–∞–∫—Ç–æ–∑–Ω–µ.
<b>[–†]</b> --> –ó–∞–º—ñ—Å—Ç—å –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –º–æ–ª–æ–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ä–æ—Å–ª–∏–Ω–Ω–µ.
<b>–Ü–º–º–µ—Ä—Å—ñ—è</b> --> –°–ø–æ—Å—ñ–± –∑–∞–≤–∞—Ä—é–≤–∞–Ω–Ω—è, —à–ª—è—Ö–æ–º –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –≤–æ–¥–∏ –∑ —Ç–∏–º, —â–æ —Ç–∏ –∑–∞–≤–∞—Ä—é—î—à.
"""


def get_random_menu_item_btn():
    return {
        "title": "üé≤ –©–æ –º–µ–Ω—ñ –≤–∏–ø–∏—Ç–∏?",
        "show_help": True,
        "row": 1,
        "callback_data": {"skip_defaults": True, "is_deserts": False, "available": True},
        "callback": "get_random_item",
        "children": {
            "roll": {
                "row": 1,
                "title": ROLL_BUTTON,
            },
        },
    }


def get_social_networks():
    return {
        "title": "–ú–∏ –≤ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂–∞—Ö",
        "row": 2,
        "callback": "social_networks",
    }


def get_drinks():
    return {
        "title": "ü•§ –ù–∞–ø–æ—ó",
        "row": 0,
        "reply": random.choice(CHOOSE_BUTTONS),
        "children": {
            "black_coffee": {
                "title": "‚òï –ß–æ—Ä–Ω–∞ –∫–∞–≤–∞",
                "row": 0,
                "reply": random.choice(CHOOSE_BUTTONS),
                "show_help": True,
                "callback_data": {
                    "is_coffee": True,
                    "is_black_coffee": True,
                },
                "callback": "get_menu_items",
            },
            "coffee_with_milk": {
                "title": "ü•õ –ö–∞–≤–∞ –∑ –º–æ–ª–æ–∫–æ–º",
                "row": 0,
                "reply": random.choice(CHOOSE_BUTTONS),
                "show_help": True,
                "callback_data": {
                    "is_coffee": True,
                    "is_season": False,
                    "is_milk": True,
                    "skip_defaults": True,
                    "available": True,
                },
                "callback": "get_menu_items",
            },
            "coffee_with_juice": {
                "title": "üçπ –ù–∞ —Ñ—Ä–µ—à—ñ",
                "row": 0,
                "reply": random.choice(CHOOSE_BUTTONS),
                "show_help": True,
                "callback_data": {
                    "is_coffee": True,
                    "is_fresh": True,
                },
                "callback": "get_menu_items",
            },
            "matcha": {
                "title": "üçµ –ú–∞—Ç—á–∞",
                "row": 2,
                "reply": random.choice(CHOOSE_BUTTONS),
                "show_help": True,
                "callback_data": {
                    "is_matcha": True,
                    "is_season": False,
                    "skip_defaults": True,
                    "available": True,
                },
                "callback": "get_menu_items",
            },
            "tea": {
                "title": "ü´ñ –ß–∞–π",
                "row": 2,
                "reply": random.choice(CHOOSE_BUTTONS),
                "show_help": True,
                "callback_data": {
                    "is_tea": True,
                },
                "callback": "get_menu_items",
            },
            "other": {
                "title": "‚ô® –ö–∞–∫–∞–æ",
                "row": 2,
                "reply": random.choice(CHOOSE_BUTTONS),
                "show_help": True,
                "callback_data": {
                    "is_other": True,
                    "skip_defaults": True,
                    "available": True,
                },
                "callback": "get_menu_items",
            },
        },
    }


def get_deserts():
    return {
        "title": "üßÅ –î–µ—Å–µ—Ä—Ç–∏",
        "row": 1,
        "reply": "–¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ —Ç–∏–º, —è–∫—ñ –¥–µ—Å–µ—Ä—Ç–∏ –≤ –Ω–∞—Å –±—É–≤–∞—é—Ç—å. ",
        "callback_data": {"is_deserts": True, "skip_defaults": True, "available": True},
        "callback": "get_menu_items",
    }


def get_season_menu():
    return {
        "title": "üçπ –°–µ–∑–æ–Ω–µ –º–µ–Ω—é",
        "row": 0,
        "children": {
            "coffee": {
                "title": "‚òï –ù–∞ –∫–∞–≤—ñ",
                "row": 0,
                "reply": random.choice(CHOOSE_BUTTONS),
                "show_help": True,
                "callback_data": {
                    "is_coffee": True,
                    "skip_defaults": True,
                    "is_season": True,
                    "available": True,
                },
                "callback": "get_menu_items",
            },
            "matcha": {
                "title": "üçµ –ù–∞ –º–∞—Ç—á—ñ",
                "row": 0,
                "reply": random.choice(CHOOSE_BUTTONS),
                "show_help": True,
                "callback_data": {
                    "is_matcha": True,
                    "skip_defaults": True,
                    "is_season": True,
                    "available": True,
                },
                "callback": "get_menu_items",
            },
            "other": {
                "title": "üßã –Ü–Ω—à–µ",
                "reply": random.choice(CHOOSE_BUTTONS),
                "show_help": True,
                "row": 0,
                "callback_data": {
                    "is_other": True,
                    "skip_defaults": True,
                    "is_season": True,
                    "available": True,
                },
                "callback": "get_menu_items",
            },
        },
    }


def get_main_menu_definition():
    return {
        "reply": random.choice(HOME_REPLY),
        "children": {
            "social_networks": get_social_networks(),
            "drinks": get_drinks(),
            "deserts": get_deserts(),
            "season": get_season_menu(),
            "random": get_random_menu_item_btn(),
        },
    }


def get_next_saturday():
    d = date.today()
    t = timedelta((7 + 5 - d.weekday()) % 7)
    return d + t


def samos_button_reveal():
    today = date.today()
    available_days = [0, 1, 2, 3, 6]
    can_order = False
    if today.weekday() in available_days:
        can_order = True
    return can_order


async def get_menu_definition(user: UserModel):
    menu = deepcopy(get_main_menu_definition())

    def samos_order_btn():
        return {
            "title": "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∞–º–æ—Å—ñ–≤",
            "row": 2,
            "reply": random.choice(CHOOSE_BUTTONS),
            "callback": "order_samos",
        }

    def verification_user_btn():
        return {
            "title": "–í–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ —é–∑–µ—Ä–∞",
            "row": 2,
            "reply": " –û–±–µ—Ä—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º",
            "callback": "unverified_users",
        }

    if user.is_verified and samos_button_reveal():
        # menu['children']['menu']['children']['drinks']['children'] = {"secret": {
        #     "title": "Speak easy üòè",
        #     "reply": "üòè",
        # }}

        menu["children"]["order_samos"] = samos_order_btn()

    if user.is_admin:
        menu["children"]["user_verification"] = verification_user_btn()
        # if not can_order:
        #     del menu['buttons'][2]

    return menu
